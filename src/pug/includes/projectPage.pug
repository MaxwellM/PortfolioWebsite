title Maxwell Ross Morin's list of previous projects!
div(ng-cloak='')
    md-content.md-padding(layout-xs='column', layout='column')
        div(flex-xs='', flex-gt-xs='50', layout='row', style='margin:auto;')
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline Orbit Messenger
                img.md-card-image(ng-src='./images/OrbitMessenger.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Release: January 2020
                        span
                            | Role: Full-Stack Developer
                        span
                            | Platform: Windows
                        span
                            | Language: Go/Gin, Java/JavaFX, LESS (CSS)
                    p
                        span
                            | Orbit Messenger is a multi-threaded, TLS encrypted, websocketed JavaFX application that allows multiple users to communicate via secured messaging with a Go server and PostgreSQL database.
        div(flex-xs='', flex-gt-xs='50', layout='row')
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline A Quote Builder
                        span.md-subhead Image intentionally blurred
                img.md-card-image(ng-src='./images/QuoteBuilder.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Release: February 2019
                        span
                            | Role: Full-Stack Developer
                        span
                            | Platform: Web
                        span
                            | Language: Go/Gin, Python, JavaScript, AngularJS, Jade (HTML), and LESS (CSS)
                    p
                        span
                            | This project was built with the intention to create 'Quick Books' like suite where a particular company could create customized quotes, edit those quotes, and send those quotes to their respective partners.
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline A Manufacturing Portal
                        span.md-subhead Image intentionally blurred
                img.md-card-image(ng-src='./images/MfgPortal.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Release: October 2017
                        span
                            | Role: Full-Stack Developer
                        span
                            | Platform: Web
                        span
                            | Language: Go/Gin, Python, JavaScript, AngularJS, Jade (HTML), and LESS (CSS)
                    p
                        span
                            | This project was the one stop site for all things related to the testing of all physical products a particular company. This software suite had the following abilities, initiate a multitude of tests, review the test results, run reports against test results, add/remove devices to test against, and contains 15+ single purpose tools that were intended to assist the manufacturing and business development team with common tasks related to these devices.
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline Networked Input/Output Settings Page
                        span.md-subhead Image intentionally blurred
                img.md-card-image(ng-src='./images/NIOSettings.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Release: March 2018
                        span
                            | Role: Front-End Developer
                        span
                            | Platform: Web
                        span
                            | Language: JavaScript, AngularJS, Jade (HTML), and LESS (CSS)
                    p
                        span
                            | Networked Input/Output Settings page consists of all the changeable functionality within this particular device. The settings page comprises of four individual tabs that house similar functions/features. The page was redesigned with a modern styling while retaining an industrial look.
        div(flex-xs='' flex-gt-xs='50' layout='row')
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline LOST IN SPACE - UNITY3D
                img.md-card-image(ng-src='./images/LostInSpace.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Genre: 2D Physic Based Balance
                        span
                            | Release: October 2014
                        span
                            | Role: Architect, Lead Designer, Programmer
                        span
                            | Platform: Windows/Web
                        span
                            | Language: C# in Unity
                    p
                        span
                            | In my graduate level Advanced Unity Programming course I choose to do a 2D game. I did two projects that semester and this was my first one. Titled Lost in Space, this was a remake of Salvare that I did two years prior. This game was built in Unity(V4.6), images were created in Photoshop, and the music was provided by the Russian Red Army Choir. This showcases Unity's 2D assets through a 2D physics simulation where the player must orbit around planets by using a limited amount of fuel to nudge the probe.
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline EGGMAN - UNITY3D
                img.md-card-image(ng-src='./images/Eggman.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Genre: 2D AI Simulation
                        span
                            | Release: October 2014
                        span
                            | Role: Architect, Lead Designer, Programmer
                        span
                            | Platform: Windows/Web
                        span
                            | Language: C# in Unity
                    p
                        span
                            | In my graduate level Advanced Unity Programming course I choose to do a 2D game. I did two projects this semester and this was my second one. This game was built in Unity(V4.6) and the images were created in Photoshop. This title demos Unity's Rigidbody 2D physics where two AI battle. The game showcases independent limb-to-limb movement instead of the traditional character controller approach. The logic the AI follows is built from three simple rules. If the enemy has a distance larger more than 25, move closer. If the enemy has a distance less than 12, move away. Upon being hit, the character will randomly choose between three attack styles, clockwise, counter clockwise, and random. Also there is a small random chance of jumping too, how fun?
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline EGGCITE BIKE - UNITY3D
                img.md-card-image(ng-src='./images/EggciteBike.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Genre: 2D Physic Based Balance
                        span
                            | Release: May 2015
                        span
                            | Role: Architect, Lead Designer, Programmer
                        span
                            | Platform: Windows/Web
                        span
                            | Language: C# in Unity
                    p
                        span
                            | Eggcite Bike was created in Unity(V4.6). Every character and bicycle is powered by the use of Rigidbody2D, WheelJoint2D, HingeJoint2D, DistanceJoint2D, and SpringJoint2D components. The bicycles are powered through the WheelJoint2D components that rotate the wheel itself to create movement based upon user input. The goal is to reach the end of the level without crashing. Since you had no choice but to be an egg if you collide with anything you will break. You can rotate the bicycle by pressing the Q/E keys to help maintain balance.
        div(flex-xs='' flex-gt-xs='50' layout='row')
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline MEDIEVAL FPS - UNITY3D
                img.md-card-image(ng-src='./images/Medevil.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Genre: 3D FPS Game
                        span
                            | Release: October 2013
                        span
                            | Role: Architect, Lead Designer, Programmer
                        span
                            | Platform: Windows/Web
                        span
                            | Language: C# in Unity
                    p
                        span
                            | Introductory Unity programming course where my final project for the class was to create a game. I choose to produce a 3D action game that featured a realistic medieval environment. The game featured a one square mile realistic environment, night-day system, enemy AI, and rag-doll physics. The game makes use of multiple assets such as: UFPS (Player/AI mechanics), UniStorm (weather), Medieval World Creation Kit (buildings), and the sound effects from Chivalry: Medieval Warfare.
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline MEDIEVAL DIALOG FPS - UNITY3D
                img.md-card-image(ng-src='./images/MedevilDialog.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Genre: 3D Dialog FPS Game
                        span
                            | Release: April 2014
                        span
                            | Role: Architect, Lead Designer, Programmer
                        span
                            | Platform: Windows/Web
                        span
                            | Language: C# in Unity
                    p
                        span
                            | In my Independent study (second Unity programming course) I produced a 3D game showcasing dialog within video games. My project consisted of five NPCs that offered missions and multiple dialog outcomes. The game makes use of multiple assets such as: UFPS (Player/AI mechanics), UniStorm (weather), Medieval World Creation Kit (buildings), and  Dialogue System (dialogue).
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline SALVARE - PYTHON (PYGAME)
                img.md-card-image(ng-src='./images/Salvare.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Genre: Physics Simulation
                        span
                            | Release: December 2012
                        span
                            | Role: Lead Designer, Programmer, Artist
                        span
                            | Platform: Windows/Web
                        span
                            | Language: Python in PyGame SDL
                    p
                        span
                            | Group project that consisted of creating a Python game using the PyGame SDL. Unfortunately this group project turned into a solo project with the entire application was designed/built by myself. The game is titled Salvare (Latin for savior) and is a 2D Newtonian Physics based orbit simulator. The objective of the game is to launch a probe from Earth and using a limited amount of fuel nudging it so that it will orbit other planets. The artwork was created using public domain images of construction paper and manipulated in Adobe Photoshop. This won second place at the 2012 UMaine Gaming Expo.
                        span
                            | Three main features:
                        span
                            | Alpha Blending: This was accomplished by creating two separate images, a planet and it's ozone layer. The ozone layer was created as a PNG which supports Alpha. In PyGame, the ozone layer was placed behind the planet with Alpha enabled.
                        span
                            | Animation: Animation was achieved in the main menu by having the probe that was set as it's own PyGame Surface to follow a circular motion. This allowed the probe to move fluidly producing smooth animation.
                        span
                            | Performance Optimization: All objects that moved were instantiated on their own PyGame Surface and added to an Array which was then called upon at the end of the main while loop. This provided a way to have a single draw call and only redraw what was necessary.
        div(flex-xs='' flex-gt-xs='50' layout='row')
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline TURTLES - JAVA (SWING)
                img.md-card-image(ng-src='./images/Turtles.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Genre: Turtle Graphics Simulation
                        span
                            | Release: April 2013
                        span
                            | Role: Architect, Lead Designer, Programmer
                        span
                            | Platform: Windows
                        span
                            | Language: Java, Java Swing
                    p
                        span
                            | In my object-oriented programming course I created a simulation with 'turtles' that were set on a random path. Upon a turtle and turtle collision they would become sick, turn a darker color, and slow down for a certain length of time. If a turtle collided while being sick, each subsequent collision would increase the duration of it's sickness also changing it's color and speed. There was also a GUI window that displayed the current turtle's direction and color. The simulation also included a counter for the infected turtles and a reset/pause feature.
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline NCBROWSE 2.0 - JAVA (SWING)
                img.md-card-image(ng-src='./images/ncBrowse.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Genre: Education
                        span
                            | Release: April 2015
                        span
                            | Role: Architect, Lead Designer, Programmer
                        span
                            | Platform: Windows
                        span
                            | Language: Java, Java Swing
                    p
                        span
                            | NCBrowse 2.0 is a Java based NetCDF visualizer that was initially developed by Donald W. Denbo employed by theNOAA/PMEL/EPIC group. I took this application and added further functionality such as a separate panel to display a ncDump, allowing up to eight variables be displayed even across all screens, and allowing simultaneous (multithreaded) videos. This project was intended to provide Phillip M. Dicken's Supercomputing Lab at the University of Maine a useful application to display NetCDF files.
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline SCAPEGOAT TREE - JAVA (SWING)
                img.md-card-image(ng-src='./images/ScapegoatTree.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Genre: Education
                        span
                            | Release: December 2013
                        span
                            | Role: Architect, Programmer
                        span
                            | Platform: Windows
                        span
                            | Language: Java, Java Swing
                    p
                        span
                            | My visual Scapegoat Tree was built in Java using Swing Components and intended to be an educational tool for those learning databases, specifically Scapegoat Trees. The application supports adding, finding, or removing a node and producing an in-order, pre-order, or post-order traversal of the Scapegoat Tree. This was developed in a two person team consisting of Dylan Lougee and myself.
        div(flex-xs='' flex-gt-xs='50' layout='row')
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline QUICK CUSTOMER - JAVA (JAVAFX)
                img.md-card-image(ng-src='./images/QuickCustomer.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Genre: Commercial Application
                        span
                            | Release: April 2015
                        span
                            | Role: Designer, Programmer
                        span
                            | Platform: Windows
                        span
                            | Language: Java, JavaFX
                    p
                        span
                            | In my software engineering class we were divided into groups of nine and each assigned a few specific roles. The project was tasked with creating an application solution for a representative of Bangor Savings Bank that would be used by their help desk members taking incoming calls. The application would pull the phone number and run it against a SQL database and display relevant information. Our application was built in JavaFX with my primary role being UI I was tasked with implementing the frontend.
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline ALGORITHMS - JAVA
                img.md-card-image(ng-src='./images/ALGORITHMS.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Genre: Education
                        span
                            | Release: April 2015
                        span
                            | Role: Programmer
                        span
                            | Platform: Windows
                        span
                            | Language: Java
                    p
                        span
                            | In a group of four we were tasked with implementing three separate algorithms of various complexity in a language of our choosing. Our group was given Longest Common Substring, Satisfiability, and the Clique problem. We did solo implementations for Longest Common Substring, Satisfiablity, and worked together for the Clique problem. I choose Java as my language of choice for my two implementations.
            md-card
                md-card-title
                    md-card-title-text
                        span.md-headline POWER BI DESKTOP - EXECUTIVE DASHBOARD
                img.md-card-image(ng-src='./images/Executive+Dashboard.png', alt='Washed Out', style='width:400px;height:300px;margin:auto;')
                md-card-content
                    p
                        span
                            | Application: Power BI Desktop
                        span
                            | Release: January 2016
                        span
                            | Role: Architect, Lead Designer, Programmer
                        span
                            | Platform: Windows
                        span
                            | Language: PowerBI
                    p
                        span
                            label Created an executive dashboard based off of our metrics from our ticketing system in Power BI Desktop. I configured Power BI Desktop to connect to our Dell K1000 Systems Management Appliance via a MySQL connection. Once configured I used the builtin tables and created calculated columns/measures  to show the following metrics:
                                li Closed Ticket Clients
                                li Closed Ticket Types
                                li Closed Tickets Quarter Over Quarter
                                li All Tickets Closed By Category
                                li Service Request Closed Tickets By Category
                                li Incident Closed Tickets By Category
                        span
                            | Also created a customized filter slicer that allows you to filter by year, month, and day.